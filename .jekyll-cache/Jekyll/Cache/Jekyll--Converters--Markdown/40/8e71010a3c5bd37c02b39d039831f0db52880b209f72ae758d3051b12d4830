I"1E<h2 id="前言">前言</h2>
<p>上一期讲计时器的时候提到了动作管理器,这篇文章就来好好谈一下它.</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_hashElement</span>
<span class="p">{</span>
    <span class="k">struct</span> <span class="n">_ccArray</span>     <span class="o">*</span><span class="n">actions</span><span class="p">;</span>
    <span class="n">Node</span>                <span class="o">*</span><span class="n">target</span><span class="p">;</span>
    <span class="kt">int</span>                 <span class="n">actionIndex</span><span class="p">;</span>
    <span class="n">Action</span>              <span class="o">*</span><span class="n">currentAction</span><span class="p">;</span>
    <span class="kt">bool</span>                <span class="n">currentActionSalvaged</span><span class="p">;</span>
    <span class="kt">bool</span>                <span class="n">paused</span><span class="p">;</span>
    <span class="n">UT_hash_handle</span>      <span class="n">hh</span><span class="p">;</span>
<span class="p">}</span> <span class="n">tHashElement</span><span class="p">;</span></code></pre></figure>

<h3 id="动作的创建">动作的创建</h3>

<p>先来看一下这个结构体,里面封装了对象拥有的动作的集合和其他一些动作的属性. 
动作创建的时候是走了管理器的addAction函数的,如下:</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="kt">void</span> <span class="n">ActionManager</span><span class="o">::</span><span class="n">addAction</span><span class="p">(</span><span class="n">Action</span> <span class="o">*</span><span class="n">action</span><span class="p">,</span> <span class="n">Node</span> <span class="o">*</span><span class="n">target</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">paused</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">CCASSERT</span><span class="p">(</span><span class="n">action</span> <span class="o">!=</span> <span class="nb">nullptr</span><span class="p">,</span> <span class="s">"action can't be nullptr!"</span><span class="p">);</span>
    <span class="n">CCASSERT</span><span class="p">(</span><span class="n">target</span> <span class="o">!=</span> <span class="nb">nullptr</span><span class="p">,</span> <span class="s">"target can't be nullptr!"</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">action</span> <span class="o">==</span> <span class="nb">nullptr</span> <span class="o">||</span> <span class="n">target</span> <span class="o">==</span> <span class="nb">nullptr</span><span class="p">)</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="n">tHashElement</span> <span class="o">*</span><span class="n">element</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
    <span class="c1">// we should convert it to Ref*, because we save it as Ref*</span>
    <span class="n">Ref</span> <span class="o">*</span><span class="n">tmp</span> <span class="o">=</span> <span class="n">target</span><span class="p">;</span>
    <span class="n">HASH_FIND_PTR</span><span class="p">(</span><span class="n">_targets</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tmp</span><span class="p">,</span> <span class="n">element</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="n">element</span><span class="p">)</span><span class="c1">//封装动作并放入哈希表</span>
    <span class="p">{</span>
        <span class="n">element</span> <span class="o">=</span> <span class="p">(</span><span class="n">tHashElement</span><span class="o">*</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">element</span><span class="p">),</span> <span class="mi">1</span><span class="p">);</span>
        <span class="n">element</span><span class="o">-&gt;</span><span class="n">paused</span> <span class="o">=</span> <span class="n">paused</span><span class="p">;</span>
        <span class="n">target</span><span class="o">-&gt;</span><span class="n">retain</span><span class="p">();</span><span class="c1">//引用计数加一</span>
        <span class="n">element</span><span class="o">-&gt;</span><span class="n">target</span> <span class="o">=</span> <span class="n">target</span><span class="p">;</span>
        <span class="n">HASH_ADD_PTR</span><span class="p">(</span><span class="n">_targets</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">element</span><span class="p">);</span>
    <span class="p">}</span>
     <span class="n">actionAllocWithHashElement</span><span class="p">(</span><span class="n">element</span><span class="p">);</span>
     <span class="n">CCASSERT</span><span class="p">(</span><span class="o">!</span> <span class="n">ccArrayContainsObject</span><span class="p">(</span><span class="n">element</span><span class="o">-&gt;</span><span class="n">actions</span><span class="p">,</span> <span class="n">action</span><span class="p">),</span> <span class="s">"action already be added!"</span><span class="p">);</span>
     <span class="n">ccArrayAppendObject</span><span class="p">(</span><span class="n">element</span><span class="o">-&gt;</span><span class="n">actions</span><span class="p">,</span> <span class="n">action</span><span class="p">);</span>
     <span class="n">action</span><span class="o">-&gt;</span><span class="n">startWithTarget</span><span class="p">(</span><span class="n">target</span><span class="p">);</span><span class="c1">//开始动作</span>
<span class="p">}</span></code></pre></figure>

<p>action是要执行的动作,target是动作执行者. 
可以发现,动作执行的对象是Ref类型的. 
那么它就被放到内存管理中.</p>
<h3 id="动作的更新">动作的更新</h3>

<p>先看一下管理器的更新:</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"> <span class="kt">void</span> <span class="n">ActionManager</span><span class="o">::</span><span class="n">update</span><span class="p">(</span><span class="kt">float</span> <span class="n">dt</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">tHashElement</span> <span class="o">*</span><span class="n">elt</span> <span class="o">=</span> <span class="n">_targets</span><span class="p">;</span> <span class="n">elt</span> <span class="o">!=</span> <span class="nb">nullptr</span><span class="p">;</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="n">_currentTarget</span> <span class="o">=</span> <span class="n">elt</span><span class="p">;</span>
        <span class="n">_currentTargetSalvaged</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">paused</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// The 'actions' MutableArray may change while inside this loop.</span>
            <span class="k">for</span> <span class="p">(</span><span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">actionIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">actionIndex</span> <span class="o">&lt;</span> <span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">actions</span><span class="o">-&gt;</span><span class="n">num</span><span class="p">;</span>
                <span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">actionIndex</span><span class="o">++</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">currentAction</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">Action</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">actions</span><span class="o">-&gt;</span><span class="n">arr</span><span class="p">[</span><span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">actionIndex</span><span class="p">]);</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">currentAction</span> <span class="o">==</span> <span class="nb">nullptr</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="k">continue</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">currentActionSalvaged</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
                <span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">currentAction</span><span class="o">-&gt;</span><span class="n">step</span><span class="p">(</span><span class="n">dt</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">currentActionSalvaged</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="c1">// The currentAction told the node to remove it. To prevent the action from</span>
                    <span class="c1">// accidentally deallocating itself before finishing its step, we retained</span>
                    <span class="c1">// it. Now that step is done, it's safe to release it.</span>
                    <span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">currentAction</span><span class="o">-&gt;</span><span class="n">release</span><span class="p">();</span>
                <span class="p">}</span> <span class="k">else</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">currentAction</span><span class="o">-&gt;</span><span class="n">isDone</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">currentAction</span><span class="o">-&gt;</span><span class="n">stop</span><span class="p">();</span>
                    <span class="n">Action</span> <span class="o">*</span><span class="n">action</span> <span class="o">=</span> <span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">currentAction</span><span class="p">;</span>
                    <span class="c1">// Make currentAction nil to prevent removeAction from salvaging it.</span>
                    <span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">currentAction</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
                    <span class="n">removeAction</span><span class="p">(</span><span class="n">action</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">currentAction</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="c1">// elt, at this moment, is still valid</span>
        <span class="c1">// so it is safe to ask this here (issue #490)</span>
        <span class="n">elt</span> <span class="o">=</span> <span class="p">(</span><span class="n">tHashElement</span><span class="o">*</span><span class="p">)(</span><span class="n">elt</span><span class="o">-&gt;</span><span class="n">hh</span><span class="p">.</span><span class="n">next</span><span class="p">);</span>
        <span class="c1">// only delete currentTarget if no actions were scheduled during the cycle (issue #481)</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">_currentTargetSalvaged</span> <span class="o">&amp;&amp;</span> <span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">actions</span><span class="o">-&gt;</span><span class="n">num</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">deleteHashElement</span><span class="p">(</span><span class="n">_currentTarget</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="c1">//if some node reference 'target', it's reference count &gt;= 2 (issues #14050)</span>
        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">_currentTarget</span><span class="o">-&gt;</span><span class="n">target</span><span class="o">-&gt;</span><span class="n">getReferenceCount</span><span class="p">()</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">deleteHashElement</span><span class="p">(</span><span class="n">_currentTarget</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="c1">// issue #635</span>
    <span class="n">_currentTarget</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
<span class="p">}</span> </code></pre></figure>

<p>可以看到,每一次更新,管理器遍历了存放动作的集合, 
如果当前动作不为空, 
就调用step函数来实现具体的更新逻辑. 
如果动作结束了,就把它停止并且从管理器中移除. 
可能有人就要问了,管理器是怎么知道动作是否结束呢? 
别着急,下面就来讲一下.</p>
<h3 id="动作的结束">动作的结束</h3>
<p>通过查看继承关系可以知道,动作有actionInterval(持续动作)和 
actionInstant(瞬时动作). 
这两个都继承了FiniteTimeAction(加了时间的动作类). 
FiniteTimeAction又继承了Action(最基本的动作类). 
瞬时动作没什么好说的,直接看持续动作的更新类:</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="kt">void</span> <span class="n">ActionInterval</span><span class="o">::</span><span class="n">step</span><span class="p">(</span><span class="kt">float</span> <span class="n">dt</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">_firstTick</span><span class="p">)</span><span class="c1">//第一次触发</span>
    <span class="p">{</span>
        <span class="n">_firstTick</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
        <span class="n">_elapsed</span> <span class="o">=</span> <span class="n">MATH_EPSILON</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="n">_elapsed</span> <span class="o">+=</span> <span class="n">dt</span><span class="p">;</span><span class="c1">//持续时间增加</span>
    <span class="p">}</span>
    <span class="kt">float</span> <span class="n">updateDt</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">max</span><span class="p">(</span><span class="mf">0.0</span><span class="n">f</span><span class="p">,</span>                                  <span class="c1">// needed for rewind. elapsed could be negative</span>
                              <span class="n">std</span><span class="o">::</span><span class="n">min</span><span class="p">(</span><span class="mf">1.0</span><span class="n">f</span><span class="p">,</span> <span class="n">_elapsed</span> <span class="o">/</span> <span class="n">_duration</span><span class="p">)</span>
                              <span class="p">);</span><span class="c1">//更新的时间,范围0到1</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">sendUpdateEventToScript</span><span class="p">(</span><span class="n">updateDt</span><span class="p">,</span> <span class="k">this</span><span class="p">))</span> <span class="k">return</span><span class="p">;</span>
    <span class="k">this</span><span class="o">-&gt;</span><span class="n">update</span><span class="p">(</span><span class="n">updateDt</span><span class="p">);</span>
    <span class="n">_done</span> <span class="o">=</span> <span class="n">_elapsed</span> <span class="o">&gt;=</span> <span class="n">_duration</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>最后一行代码是重点,如果持续的时间大于设定的总时间, 
那么这个动作被标记完成,会被管理器干掉.</p>
<h3 id="疑问">疑问</h3>

<p>可以发现一个细节: 
判断是放在更新之后的, 
也就是说动作是在下一帧才真正移除的. 
具体是什么原因我也不清楚, 
有知道的可以告诉下我哈.</p>
:ET