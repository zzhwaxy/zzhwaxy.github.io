I"<h2 id="前言">前言</h2>
<p>和Java不同,c++中需要手动释放分配的内存.<br />
否则,会造成内存泄漏.<br />
而在cocos中并不需要我们主动释放.<br />
它借鉴了objective-c的内存管理的机制,采用了自动释放池来进行内存管理.</p>
<h2 id="分析">分析</h2>
<p>在对象的初始化中,经常可以看到如下的代码:</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="n">Scene</span> <span class="o">*</span><span class="n">ret</span> <span class="o">=</span> <span class="k">new</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">nothrow</span><span class="p">)</span> <span class="n">Scene</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">&amp;&amp;</span> <span class="n">ret</span><span class="o">-&gt;</span><span class="n">init</span><span class="p">())</span>
    <span class="p">{</span>
        <span class="n">ret</span><span class="o">-&gt;</span><span class="n">autorelease</span><span class="p">();</span>
        <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
    <span class="p">}</span></code></pre></figure>

<p>autorelease函数就是自动管理内存的关键.<br />
通过查看内部代码,我们可以看到它的构造如下.</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="n">Ref</span><span class="o">*</span> <span class="n">Ref</span><span class="o">::</span><span class="n">autorelease</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">PoolManager</span><span class="o">::</span><span class="n">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">getCurrentPool</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">addObject</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>不急着往下看,先来了解一下Ref这个类.</p>

<h3 id="ref">Ref</h3>
<p>引用计数类.</p>
<blockquote>
  <p>Ref is used for reference count management. If a class inherits from Ref,
 then it is easy to be shared in different places.</p>
</blockquote>

<p>从官方的注释可以知道,如果一个类继承了Ref,就可以实现自动内存管理.</p>
<h4 id="主要方法">主要方法</h4>
<ul>
  <li>void retain(); //引用计数加一</li>
  <li>void release(); //引用计数减一,如果为0,就被释放</li>
  <li>Ref* autorelease(); //自动释放</li>
  <li>unsigned int getReferenceCount() const; //得到引用计数的值
    <h4 id="成员变量">成员变量</h4>
  </li>
  <li>unsigned int _referenceCount; //引用计数的值</li>
  <li>friend class AutoreleasePool; //自动释放池<br />
由此得知,对象通过自动释放池来管理,<br />
引用计数是否为0来判断是否需要释放对象.<br />
我们也同样看一下自动释放池的方法.
    <h3 id="autoreleasepool">AutoreleasePool</h3>
    <p>自动释放池.</p>
    <h4 id="主要方法-1">主要方法</h4>
  </li>
  <li>void addObject(Ref *object); //把对象加到自动释放池中</li>
  <li>void clear(); //清理自动释放池
    <h4 id="成员变量-1">成员变量</h4>
  </li>
  <li>std::vector&lt;Ref*&gt; _managedObjectArray;</li>
  <li>std::string _name; <br />
可以看到,自动释放池使用了一个动态数组来管理内存中的对象.<br />
自动释放池可以用名字来区分.
    <h3 id="poolmanager">PoolManager</h3>
    <p>一个单例实现的池子的管理类.</p>
    <h4 id="主要方法-2">主要方法</h4>
  </li>
  <li>void push(AutoreleasePool *pool); //入栈</li>
  <li>void pop(); //出栈
    <h4 id="成员变量-2">成员变量</h4>
  </li>
  <li>static PoolManager* s_singleInstance;  //管理器的单例</li>
  <li>std::vector&lt;AutoreleasePool*&gt; _releasePoolStack; //用来存放池子的栈</li>
  <li>AutoreleasePool *getCurrentPool() const;  //得到当前池子的对象<br />
通过查看源代码,我们知道autorelase这个函数其实就是把对象加到自动释放池中.<br />
那么池子是在何时释放对象的呢?<br />
通过打断点调试可以知道,在mainloop这个函数调用了这样一句话.
    <blockquote>
      <p>PoolManager::getInstance()-&gt;getCurrentPool()-&gt;clear();</p>
    </blockquote>
  </li>
</ul>

<p>走进这个函数:</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="kt">void</span> <span class="n">AutoreleasePool</span><span class="o">::</span><span class="n">clear</span><span class="p">()</span>
<span class="p">{</span>
<span class="cp">#if defined(COCOS2D_DEBUG) &amp;&amp; (COCOS2D_DEBUG &gt; 0)
</span>    <span class="n">_isClearing</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
<span class="cp">#endif
</span>    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Ref</span><span class="o">*&gt;</span> <span class="n">releasings</span><span class="p">;</span>
    <span class="n">releasings</span><span class="p">.</span><span class="n">swap</span><span class="p">(</span><span class="n">_managedObjectArray</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span> <span class="o">&amp;</span><span class="n">obj</span> <span class="o">:</span> <span class="n">releasings</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">obj</span><span class="o">-&gt;</span><span class="n">release</span><span class="p">();</span>
    <span class="p">}</span>
<span class="cp">#if defined(COCOS2D_DEBUG) &amp;&amp; (COCOS2D_DEBUG &gt; 0)
</span>    <span class="n">_isClearing</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
<span class="cp">#endif
</span><span class="p">}</span></code></pre></figure>

<p>可以得知,最终真正释放对象的是obj-&gt;release()这一步.</p>
<h2 id="总结">总结</h2>
<p>cocos把对象放到自动释放池中来实现引用计数.<br />
在一开始创建的时候,引用计数为1.<br />
如果进行了addchild或者runAction等操作的时候,引用计数加一.<br />
在游戏的主循环中,每一帧都会调用clear,这时候引用计数减为一.<br />
如果引用计数变成0,就在下一帧释放.<br />
所以,引用计数并不是立即释放,在有些情况下还是需要手动释放.<br />
内存管理是一个非常复杂而且让人头疼的问题,需要花费很多时间和教训才能掌握它.<br />
整体的机制差不多就到这里了,如果有问题或者错误,还请指出.</p>

:ET